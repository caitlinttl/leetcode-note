import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;


public class leetcode_note {

    // 796. Rotate String Easy---------------------------------------
    public boolean rotateString(String s, String goal) {
      return s.length() == goal.length() && (s+s).contains(goal);
    }

    // 1. Two Sum Easy---------------------------------------
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i+1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[] {i, j};
                }
            }
        }
        return new int[] {0, 0};
        // return null;
    }

    // use map
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];

        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i=0; i < nums.length; i++) {
            int diff = target - nums[i];
            if (map.containsKey(diff)) {
                ans[0] = map.get(diff);
                ans[1] = i;
                return ans;
            }

            map.put(nums[i], i);
        }

        return null;

    }
    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        
        int[] nums = {2,7,11,15};
        int target = 9;
        int[] ans = run.twoSum(nums, target);
        System.out.println(Arrays.toString(ans));
        
    }    
    


    // 27. Remove Element Easy---------------------------------------

    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        
        int[] nums = {0,1,2,2,3,0,4,2};
        int val = 2;
        int ans = run.removeElement(nums, val);

        // System.out.println(Arrays.toString(ans));
        System.out.println(ans);
    }

    public int removeElement(int[] nums, int val) {
        
        int m = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val) {

                nums[m++] = nums[i];

                // nums[m] = nums[i];
                // m++;                
            }
        }
        return m;
    }


    // 傳遞的陣列被轉換為 ArrayList tempList 並呼叫 remove() 方法從列表中刪除指定索引處的元素。它返回轉換回陣列的列表。
    public class Test {
        public static void main(String[] args) {
            Integer[] arr = {3, 1, 6, 5, 2, 8, 4};
            int elementToBeDeleted = 2;
    
            System.out.println("Original Array " + Arrays.toString(arr));
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == elementToBeDeleted) {
                    arr = removeElementUsingCollection(arr, i);
                    break;
                }
            }
            System.out.println("Array after removing element : "+elementToBeDeleted+ " -- ");
            for (int i = 0; i < arr.length; i++) {
                System.out.print(" " + arr[i]);
            }
        }
    
        public static Integer[] removeElementUsingCollection( Integer[] arr, int index ){
            List<Integer> tempList = new ArrayList<Integer>(Arrays.asList(arr));
            tempList.remove(index);
            return tempList.toArray(new Integer[0]);
        }
    }

    


    // 28. Implement strStr() Easy---------------------------------------

    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        long startTime = System.currentTimeMillis();

        // ------------------------------
        String haystack = "hello";
        String needle = "a";
        
        int ans = run.strStr(haystack, needle);
        System.out.println(ans);
        // System.out.println(Arrays.toString(ans));
        // ------------------------------

        long endTime = System.currentTimeMillis();
        System.out.println("Elapse of time: " + (endTime - startTime) +  " ms");
    }

    // contains
    public int strStr(String haystack, String needle) {
        if (needle == "") {
            return 0;
        }
        if (!haystack.contains(needle)) {
            return -1;
        } else {
            return haystack.indexOf(needle);
        }
    }

    // substring
    class Solution {
        public int strStr(String haystack, String needle) {
            int i = 0;
            for (i = 0; i <= haystack.length() - needle.length(); i++) {
                if ((haystack.substring(i, i + needle.length()).equals(needle))) {
                    return i;
                }
            }
            return -1;
        }
    }
    
    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------


    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------


}




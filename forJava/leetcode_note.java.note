import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;


public class leetcode_note {

    // 796. Rotate String Easy---------------------------------------
    public boolean rotateString(String s, String goal) {
      return s.length() == goal.length() && (s+s).contains(goal);
    }

    // 1. Two Sum Easy---------------------------------------
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i+1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[] {i, j};
                }
            }
        }
        return new int[] {0, 0};
        // return null;
    }

    // use map
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];

        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i=0; i < nums.length; i++) {
            int diff = target - nums[i];
            if (map.containsKey(diff)) {
                ans[0] = map.get(diff);
                ans[1] = i;
                return ans;
            }

            map.put(nums[i], i);
        }

        return null;

    }
    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        
        int[] nums = {2,7,11,15};
        int target = 9;
        int[] ans = run.twoSum(nums, target);
        System.out.println(Arrays.toString(ans));
        
    }    
    


    // 27. Remove Element Easy---------------------------------------

    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        
        int[] nums = {0,1,2,2,3,0,4,2};
        int val = 2;
        int ans = run.removeElement(nums, val);

        // System.out.println(Arrays.toString(ans));
        System.out.println(ans);
    }

    public int removeElement(int[] nums, int val) {
        
        int m = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val) {

                nums[m++] = nums[i];

                // nums[m] = nums[i];
                // m++;                
            }
        }
        return m;
    }


    // 傳遞的陣列被轉換為 ArrayList tempList 並呼叫 remove() 方法從列表中刪除指定索引處的元素。它返回轉換回陣列的列表。
    public class Test {
        public static void main(String[] args) {
            Integer[] arr = {3, 1, 6, 5, 2, 8, 4};
            int elementToBeDeleted = 2;
    
            System.out.println("Original Array " + Arrays.toString(arr));
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == elementToBeDeleted) {
                    arr = removeElementUsingCollection(arr, i);
                    break;
                }
            }
            System.out.println("Array after removing element : "+elementToBeDeleted+ " -- ");
            for (int i = 0; i < arr.length; i++) {
                System.out.print(" " + arr[i]);
            }
        }
    
        public static Integer[] removeElementUsingCollection( Integer[] arr, int index ){
            List<Integer> tempList = new ArrayList<Integer>(Arrays.asList(arr));
            tempList.remove(index);
            return tempList.toArray(new Integer[0]);
        }
    }

    


    // 28. Implement strStr() Easy---------------------------------------

    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        long startTime = System.currentTimeMillis();

        // ------------------------------
        String haystack = "hello";
        String needle = "a";
        
        int ans = run.strStr(haystack, needle);
        System.out.println(ans);
        // System.out.println(Arrays.toString(ans));
        // ------------------------------

        long endTime = System.currentTimeMillis();
        System.out.println("Elapse of time: " + (endTime - startTime) +  " ms");
    }

    // contains
    public int strStr(String haystack, String needle) {
        if (needle == "") {
            return 0;
        }
        if (!haystack.contains(needle)) {
            return -1;
        } else {
            return haystack.indexOf(needle);
        }
    }

    // substring
    class Solution {
        public int strStr(String haystack, String needle) {
            int i = 0;
            for (i = 0; i <= haystack.length() - needle.length(); i++) {
                if ((haystack.substring(i, i + needle.length()).equals(needle))) {
                    return i;
                }
            }
            return -1;
        }
    }
    
    
    // 14. Longest Common Prefix Easy---------------------------------------


    public static void main(String[] args) {
        System.out.println("-----test java-----");
        test run = new test();
        long startTime = System.currentTimeMillis();

        // ------------------------------

        // String[] strs = {"ab", "a"};
        String[] strs = {"flower","flow","flight"};
        
        String ans = run.longestCommonPrefix(strs);
        System.out.println(ans);
        // System.out.println(Arrays.toString(ans));
        
        // ------------------------------

        long endTime = System.currentTimeMillis();
        System.out.println("Elapse of time: " + (endTime - startTime) +  " ms");
    }
    

    public String longestCommonPrefix(String[] strs) {
        String ans = new String();

        for (int i = 0; i < strs[0].length(); i++) {
            for (int j = 0; j < strs.length - 1; j++) {
                if (strs[j+1].length() <= i) {
                    // To avoid "String index out of range" 下一個字串的長度, 要大於索引值
                    return ans;
                }
                if (strs[j].charAt(i) != strs[j+1].charAt(i)) {
                    // String index out of range
                    return ans;
                }
            }
            ans += strs[0].charAt(i);
        }
        return ans;
        
    }

    public String longestCommonPrefix(String[] strs) {

        for (int i = 0; i < strs[0].length(); i++) {
            char ch = strs[0].charAt(i);
            for (int j = 1; j < strs.length; j++) {
                if (strs[j].length() <= i || strs[j].charAt(i) != ch) {
                    // 長度不夠 或 字母不對 就return
                    return strs[0].substring(0,i);
                }
            }
        }
        return strs[0];
    
    }    

    // 58. Length of Last Word Easy Medium---------------------------------------

    public int lengthOfLastWord(String s) {
        String[] s_array = s.trim().split(" ");
        return s_array[s_array.length - 1].length();
    }
    
    // 387. First Unique Character in a String Easy---------------------------------------
    
    // String s = "leetcode";
    public int firstUniqChar(String s) {
        for (int i = 0; i < s.length(); i++) {
            // The char is first time appear and it never appear again.
            if (s.indexOf(s.charAt(i)) == i && s.indexOf(s.charAt(i), i + 1) == -1 ) {
                return i;
            }
        }
        return -1;
    }

    // 860. Lemonade Change Easy---------------------------------------

    public boolean lemonadeChange(int[] bills) {
        int n5 = 0;
        int n10 = 0;
        for (int i = 0; i < bills.length; i++) {
            if (bills[i] == 5) {
                n5 += 1;
            } else if (bills[i] == 10) {
                n5 -= 1;
                n10 += 1;
            } else if (bills[i] == 20) {
                if (n10 == 0) {
                    n5 -= 3;
                } else {
                    n10 -= 1;
                    n5 -= 1;
                }
            } if (n5 < 0) {
                return false;
            }
        }
        return true;
    }



    // 383. Ransom Note Easy---------------------------------------

    public boolean canConstruct(String ransomNote, String magazine) {
        String[] magazine_arr = magazine.split("");
        // array to arrayList
        ArrayList<String> magazine_arrlist = new ArrayList<String>(Arrays.asList(magazine_arr));
        for (int i = 0; i < ransomNote.length(); i++) {
            // Char to string
            String need = Character.toString(ransomNote.charAt(i));
            if ( magazine_arrlist.indexOf(need) == -1) {
                return false;
            } else {
                magazine_arrlist.remove(magazine_arrlist.indexOf(need));
            }
        }
        return true;
    }    


    // Faster!!
    public boolean canConstruct(String ransomNote, String magazine) {
        if (ransomNote.length() > magazine.length())
            return false;
        int[] count = new int[26];
        for (int i = 0; i < magazine.length(); i++) {
            count[magazine.charAt(i) - 'a']++;
            if (i < ransomNote.length())
                count[ransomNote.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] < 0)
                return false;
        }
        return true;
    }


    // 344. Reverse String Easy---------------------------------------

    // 直接改變原char[] s
    // 頭尾互換
    public void reverseString(char[] s) {
        
        for (int i = 0; i < s.length/2; i++) {
            char tmp = s[i];
            s[i] = s[s.length - 1 - i];
            s[s.length -1 -i] = tmp;
        }        
    }


    // 1422. Maximum Score After Splitting a String Easy---------------------------------------

    // same as python solution.
    // openbook
    public int maxScore(String s) {
        int zero = 0, one = 0, res = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') one++;
        }
        for (int i = 0; i < s.length() - 1; i++) {  // when divide btwn i  and i + 1;
            if (s.charAt(i) == '1') one--;  //num of ones on right side;
            else zero++;  // num of zeros on left side
            res  = Math.max(res, one + zero);
        }
        return res;
    }    


    // 151. Reverse Words in a String Medium---------------------------------------

    public String reverseWords(String s) {
        String[] s_list = s.trim().split(" ");
        StringBuilder sb = new StringBuilder();
        for (int i = s_list.length - 1; i >= 0; i--) {
            if (s_list[i].isEmpty()) {
                continue;
            } else {
                sb.append(s_list[i]);
                if (i > 0) {
                    sb.append(" ");
                }
            }
        }
        return sb.toString();
    }


    // num_title Easy Medium---------------------------------------

    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------
    // num_title Easy Medium---------------------------------------


}



